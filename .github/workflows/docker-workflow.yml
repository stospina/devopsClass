name: my second CI

on:
  push:
    branches: ['main']

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted
    environment: devops-class
    env:
      DOCKER_CONFIG: ${{ github.workspace }}/.ci-docker

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Ensure Docker engine is running (Windows)
        shell: pwsh
        run: |
          $svc = Get-Service -Name com.docker.service -ErrorAction SilentlyContinue
          if ($null -ne $svc -and $svc.Status -ne 'Running') { Start-Service com.docker.service }
          if ($null -eq $svc) {
            Start-Process -FilePath "$Env:ProgramFiles\Docker\Docker\Docker Desktop.exe" -WindowStyle Hidden
          }
          $ok = $false
          1..90 | ForEach-Object {
            try { docker info | Out-Null; $ok = $true; break } catch { Start-Sleep -Seconds 2 }
          }
          if (-not $ok) { Write-Error "Docker Engine not ready"; exit 1 }

      - name: Prepare Docker config dir
        shell: pwsh
        run: New-Item -ItemType Directory -Force -Path "$Env:GITHUB_WORKSPACE/.ci-docker" | Out-Null

      # Runs a single command using the runners shell
      - name: Log in to Docker hub
        uses: docker/login-action@v2
        with:
          username: ${{vars.DOCKER_USER}}
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: build and tag docker image
        run: |
          docker build -t "${{ vars.DOCKER_USER }}/${{vars.IMAGE_NAME}}:${{vars.TAG}}" .

      - name: Push to docker
        run: docker push "${{ vars.DOCKER_USER }}/${{vars.IMAGE_NAME}}:${{vars.TAG}}"

      - name: Run container
        shell: pwsh
        run: |
          docker run -d --rm --name "${{ vars.CONTAINER_NAME }}" -p 5000:5000 "${{ vars.DOCKER_USER }}/${{vars.IMAGE_NAME}}:${{vars.TAG}}"

      - name: Wait for app to be ready
        shell: pwsh
        run: |
          $max = 60
          for ($i = 1; $i -le $max; $i++) {
            try {
              $resp = Invoke-WebRequest -Uri http://localhost:5000/home -UseBasicParsing -TimeoutSec 2
              if ($resp.StatusCode -ge 200 -and $resp.StatusCode -lt 400) {
                Write-Host "App is up"
                exit 0
              }
            } catch {
              # ignore and retry
            }
            Write-Host "Waiting for app to be ready ($i) ..."
            Start-Sleep -Seconds 1
          }
          Write-Host "App failed to start in time"
          docker logs "${{ vars.CONTAINER_NAME }}" | Out-Host
          exit 1

      - name: Test endpoint with curl GET
        shell: pwsh
        run: |
          $resp = Invoke-WebRequest -Uri http://localhost:5000/home -UseBasicParsing -TimeoutSec 5
          $resp.Content | Tee-Object -FilePath response.txt | Out-Host
          if ($resp.Content -notmatch "Hola mundo") {
            Write-Error "Unexpected response content"
            exit 1
          }

      - name: Stop and clean container
        if: always()
        shell: pwsh
        run: |
          docker stop "${{ vars.CONTAINER_NAME }}" 2>$null
          docker rm -f "${{ vars.CONTAINER_NAME }}" 2>$null
